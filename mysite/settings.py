"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 4.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""


# settings.py 상단 부근에 있어야 함
import os
from dotenv import load_dotenv

load_dotenv() # .env 파일에서 환경 변수를 로드

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
ROOT_DIR = os.path.dirname(BASE_DIR)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'uploads')



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-d6**e2nv3&nebv^*j79s3#os%2gbwj25dkx5*+745!#(@j61=h'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    ".ap-northeast-2.compute.amazonaws.com",
    ".etnclogis.com",
    "127.0.0.1"
]


# Application definition

INSTALLED_APPS = [
    ##'polls.apps.PollsConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'polls',
    'bhqr',
    'mysite',
    'outbound',
    'storages', # 여기에 추가
    'accesstos3',
    'image_recognition',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mysite.urls'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'mssql',
        'NAME': 'tnc_django',
        'USER': 'kim_jinwoo',
        'PASSWORD': 'technet4111',
        'HOST': 'technetdb.czo9ia0scsp3.ap-northeast-2.rds.amazonaws.com',
        'PORT': '1433',
        'unicode_results': True,
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

# AUTH_PASSWORD_VALIDATORS = [
    #{
       # 'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    #},
    #{
     #   'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    #},
    #{
    #    'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    #},
    #{
    #    'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    #},
#]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

##LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'ko-KR'
TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'bhqr/static'),
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#static
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')



# 로그인 성공 시 자동으로 이동할 URL
LOGIN_REDIRECT_URL = '/main'
LOGOUT_REDIRECT_URL = '/login'


# AWS 기본 설정
AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME')
AWS_S3_REGION_NAME = 'ap-northeast-2'

# **** 이 줄을 삭제하거나 주석 처리하세요. ****
# AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com'


# 파일 업로드를 S3로
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

# S3 URL 설정 (미디어 파일 접근용)
# 만약 S3_CUSTOM_DOMAIN을 사용하지 않는다면 MEDIA_URL도 이렇게 설정해야 합니다.
# MEDIA_URL = f'https://{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com/media/'
# 또는 django-storages의 기본 동작을 따르려면 단순히 /media/ 로 설정 후
# S3에 접근 시 자동으로 URL이 생성되도록 할 수 있습니다.
MEDIA_URL = f'https://{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com/media/' # 이 형태로 변경 권장
# 또는 단순히 MEDIA_URL = '/media/' 로 설정하고 S3 URL 생성은 django-storages에 맡기기.
AWS_S3_ENCODING = 'utf-8'


# ----------------------------------------------------
# 로깅 설정 추가/변경 (Django 앱의 로그를 보기 위해)
# ----------------------------------------------------
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': { # 콘솔(표준 출력/에러)로 로그를 보냄
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        # 필요하다면 파일 로깅도 추가할 수 있습니다.
        # 'file': {
        #     'class': 'logging.handlers.RotatingFileHandler',
        #     'filename': os.path.join(os.path.dirname(os.path.abspath(__file__)), '../../logs/django_app.log'),
        #     'maxBytes': 1024 * 1024 * 5, # 5 MB
        #     'backupCount': 5,
        #     'formatter': 'verbose',
        # },
    },
    'root': { # 기본 로거 설정
        'handlers': ['console'], # 콘솔로 모든 로그를 보냄
        'level': 'INFO', # INFO 레벨 이상 로그만 표시
    },
    'loggers': {
        'django': { # Django 자체 로그 (DB 쿼리 등)
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        # 여러분의 앱 로거 (예: 'accesstos3')
        # views.py에서 logger = logging.getLogger(__name__)를 사용했으므로,
        # __name__은 'accesstos3.views' 같은 형태가 됩니다.
        # 따라서 'accesstos3' 로거의 레벨을 설정해 줍니다.
        'accesstos3': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        # 추가적으로 root 로거를 통해 모든 메시지가 콘솔로 나오게 됩니다.
    },
}